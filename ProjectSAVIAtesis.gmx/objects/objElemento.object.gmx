<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// OBSOLETO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/* objElemento
    
    Obj Parent que contiene eventos estandars entre
    vertices y aristas.
*/
elColor = c_white // Color del Nucleo
//LineList = ds_grid_create(3,10) // Lista de Conexiones
//LineCount = -1
/* LineList Index
    0 = objIndex, 1 = lineColor, 2 = lineStringDatos
*/
RutaCritica = 0
OverMouse = false // Indica si esta o no el mouse sobre el obj
Nacimiento = true // indica que esta apenas recien creado

//nCount = -1 // next counter
vCount = -1 // var counter
//pCount = -1 // prev counter
// basic info
nombre = "act" + string(irandom_range(1,999))
grafoOwn = "Noone"
mostrarVarId = 0
// next[varible_id,actividad]
// prev[variable_id,actividad]
for (var i = 0; i &lt;= 20; i++)
{
    
    variable[i] = "..." // variables en este nodo
    varValue[i] = 0; // valor de la variable en este nodo
    varColor[i] = c_black // color representativo de la variable
    nextVar[i] = 0 // ??
    prevVar[i] = 0 // 
    nextActs[i] = -1 // Conteo de cantidad de actividades proximas segun varId
    prevActs[i] = -1 // Conteo de cantidad de actividades previas segun varId
    for(var j = 0; j&lt;= 20; j++)
    {
        next[i,j] = noone
        prev[i,j] = noone   

    }
}
LineColorChange = varColor[mostrarVarId];
varColor[0] = c_black
varColor[1] = c_red
varColor[2] = c_blue
varColor[3] = c_green

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if collision_rectangle(x-12,y-12,x+12,y+12,objMousePointer,false,true) != noone
{
    OverMouse = true
    LineColorChange = c_red
    /*
    if LineColorChange &lt; 0
    {
        LineColorChange = varColor[mostrarVarId]
        varColor[mostrarVarId] = c_red
    }
    */
}
else
{
    OverMouse = false;
    LineColorChange = varColor[mostrarVarId]
    /*
    if LineColorChange &gt; 0
    {
        show_debug_message("varColor: "+string(varColor[mostrarVarId])+" / LineColorChange: "+string(LineColorChange))
        varColor[mostrarVarId] = LineColorChange
        LineColorChange = -1;
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objElemento) OverMouse = false;
OverMouse = true
global.objElementoSeleccionado = id;
//Console_TextAdd("Elemento seleccionado", c_red)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x
y = mouse_y

CommandHandler("/apos "+string(nombre)+" "+string(x)+" "+string(y))
//Actividad_SetPos(nombre, x, y)
Nacimiento = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(elColor)
draw_set_font(defaultFont)
draw_circle(x,y,3,0)
if Nacimiento
{
    draw_sprite(sprite10,0,x,y-5)
    x = mouse_x
    y = mouse_y
}
//var LineColorChange;
if OverMouse == true
{
    
    draw_set_color(c_black)
    draw_text(x-12,y-15,nombre)
    draw_circle(x,y,3,1)
    if vCount &lt; 0
    {
    
        draw_set_color(c_red)
        draw_text(x,y+20,"[!]Zero Variables")
    }
    else
    {
        for(var df = 0; df &lt;= vCount; df++)
        {
            draw_text(x,y+20+(20*df),variable[df] +":"+string(varValue[df]))
        }
    }
}


/* LineList Index
    0 = objIndex, 1 = lineColor, 2 = lineStringDatos
*/

if vCount &gt;= 0
{
    // ddf = var id
    // acId = acts
    //draw_set_color(varColor[mostrarVarId])
    draw_set_color(LineColorChange)
    for(var ddf = 0; ddf &lt;= vCount; ddf++)
    {
        for(var acId = 0; acId &lt;= nextActs[ddf]; acId++)
        {
            if next[ddf] != noone
            {
                //draw_set_color(varColor[ddf])
                if (nextVar[mostrarVarId] &gt; 0)
                {
                    draw_set_color(c_green)
                    draw_line_width(x,y+ddf*3,next[ddf,acId].x,next[ddf,acId].y+ddf*3,2)
                }
                else 
                {
                    draw_set_color(LineColorChange)
                    draw_line_width(x,y+ddf*3,next[ddf,acId].x,next[ddf,acId].y+ddf*3,2)
                }
                // mostrarVarId handled
                draw_sprite_ext(sprite11,0,(x+next[mostrarVarId,acId].x)/2,(y+next[mostrarVarId,acId].y)/2,1,1,point_direction(x,y,next[mostrarVarId,acId].x,next[mostrarVarId,acId].y),varColor[mostrarVarId],1) 
                draw_text((x+next[mostrarVarId, acId].x)/2,(y+next[mostrarVarId,acId].y)/2,string(nextVar[mostrarVarId])+":N/P:"+string(prevVar[mostrarVarId]))
                
            }
        }
    }
}
/*
if LineCount &gt;= 0
{
    var vObj, fi, in,pn;
    in = 0;
    pn = 0;
    for(fi = 0; fi &lt;= LineCount; fi++)
    {
        draw_set_color(ds_grid_get(LineList,1,fi))
            vObj = ds_grid_get(LineList,0,fi)
        if (fi mod 2 == 0) {   
                draw_line(x,y+1*pn,vObj.x,vObj.y)
                pn++;
        }
        else {
                draw_line(x,y-1*in,vObj.x,vObj.y)
                in++;
        } 
        
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
